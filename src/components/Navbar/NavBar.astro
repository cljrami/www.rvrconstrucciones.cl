---
export interface NavLink {
  href: string;
  label: string;
}

export interface Props {
  logoSrc: string;
  logoAlt: string;
  links: NavLink[];
}

const { logoSrc, logoAlt, links } = Astro.props;
---

<style>
  .transition-nav {
    transition: transform 0.3s ease-in-out;
  }

  .hidden-nav {
    transform: translateY(-100%);
  }
</style>

<div
  id="navbar"
  class="z-10 fixed top-0 left-0 w-full font-semibold text-black transition-nav"
>
  <nav class="flex justify-between items-center p-4">
    <a href="/" class="text-xl font-bold">
      <img
        src={logoSrc}
        alt={logoAlt}
        class="max-w-[50px] h-auto"
        loading="lazy"
      />
    </a>
    <button id="menu-btn" class="md:hidden">
      <svg
        class="h-6 w-6 text-white"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 6h16M4 12h16m-7 6h7"></path>
      </svg>
    </button>
    <ul id="menu" class="hidden md:flex md:flex-row items-center space-x-4">
      {
        links.map((link) => (
          <li class="p-2">
            <a
              href={link.href}
              class="flex items-center text-white hover:text-yellow-400"
            >
              {link.label}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</div>

<div
  id="sidebar"
  class="fixed inset-0 bg-slate-900 bg-opacity-10 backdrop-blur-lg hidden z-50"
>
  <div class="relative min-h-full w-80 bg-white text-gray-800">
    <button id="close-btn" class="absolute top-0 right-0 p-4">
      <svg
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
    <ul class="flex flex-col items-start p-4">
      {
        links.map((link) => (
          <li class="p-2 text-lg">
            <a href={link.href} class="flex items-center">
              {link.label}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const navbar = document.getElementById("navbar");
    const menuBtn = document.getElementById("menu-btn");
    const sidebar = document.getElementById("sidebar");
    const closeBtn = document.getElementById("close-btn");
    const sidebarLinks = sidebar ? sidebar.querySelectorAll("a") : [];
    let lastScrollY = window.scrollY;

    if (menuBtn && sidebar) {
      menuBtn.addEventListener("click", () => {
        sidebar.classList.toggle("hidden");
      });
    }

    if (closeBtn && sidebar) {
      closeBtn.addEventListener("click", () => {
        sidebar.classList.add("hidden");
      });
    }

    if (sidebarLinks) {
      sidebarLinks.forEach((link) => {
        link.addEventListener("click", () => {
          if (sidebar) {
            sidebar.classList.add("hidden");
          }
        });
      });
    }

    if (navbar) {
      window.addEventListener("scroll", () => {
        if (window.scrollY > lastScrollY) {
          navbar.classList.add("hidden-nav");
        } else {
          navbar.classList.remove("hidden-nav");
        }
        lastScrollY = window.scrollY;

        if (window.scrollY > 100) {
          navbar.style.backgroundColor = "rgba(32, 38, 49, 0.9)";
          navbar.style.backdropFilter = "blur(10px)";
          navbar.classList.remove("text-black");
          navbar.classList.add("text-white");
        } else {
          navbar.style.backgroundColor = "rgba(32, 38, 49, 0.2)";
          navbar.style.backdropFilter = "none";
          navbar.classList.remove("text-white");
          navbar.classList.add("text-black");
        }
      });
    }
  });
</script>
